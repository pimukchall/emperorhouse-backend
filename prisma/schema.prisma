generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ---------- Enums ---------- */
enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum EmployeeType {
  DAILY      // รายวัน
  MONTHLY    // รายเดือน
}

enum ContractType {
  PERMANENT  // ประจำ
  TEMPORARY  // สัญญาจ้าง
  PROBATION  // ระยะทดลองงาน
}

enum PositionLevel {
  STAF
  SVR
  ASST
  MGR
  MD
  CEO
  ADMIN
  DEV
}

/* ---------- Masters ---------- */
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique              // e.g. "admin", "staff", "dev"
  labelTh   String
  labelEn   String
  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        Int      @id @default(autoincrement())
  code      String   @unique              // e.g. "30000" (HR)
  nameTh    String
  nameEn    String

  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        Int      @id @default(autoincrement())
  code      String   @unique              // orgCode: "MK","CS","AD",...
  nameTh    String
  nameEn    String

  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ---------- User / Employee Master ---------- */
model User {
  id             Int            @id @default(autoincrement())

  // Login identity
  name           String         @default("")
  email          String
  passwordHash   String

  // Names
  firstNameTh    String
  lastNameTh     String
  firstNameEn    String
  lastNameEn     String

  // Role/Department
  roleId         Int
  departmentId   Int
  role           Role           @relation(fields: [roleId], references: [id])
  department     Department     @relation(fields: [departmentId], references: [id])

  // Organization / Work location
  orgId          Int?
  organization   Organization?  @relation(fields: [orgId], references: [id])

  // Employee master fields
  employeeCode     String?         @unique             // เช่น "68-0001"
  positionName     String?
  positionLevel    PositionLevel?
  employeeType     EmployeeType?
  contractType     ContractType?

  startDate        DateTime?
  probationEndDate DateTime?
  resignedAt       DateTime?
  birthDate        DateTime?
  gender           Gender?

  signature        Bytes?                            // ถ้าจะเปลี่ยนเป็น path ให้ใช้ String?
  avatarPath       String?

  // Relations
  passwordResets   PasswordReset[]

  // Soft delete & timestamps
  deletedAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // อนุญาตให้ reuse email ได้เมื่อ soft-delete
  @@unique([email, deletedAt])

  // ค้นหาเร็ว
  @@index([roleId, departmentId])
  @@index([orgId])
  @@index([employeeType])
  @@index([contractType])
  @@index([positionLevel])
  @@index([startDate])
  @@index([resignedAt])
  @@index([deletedAt])
}

/* ---------- Password Reset ---------- */
model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

/* ---------- Contact / Public Form ---------- */
model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(120)
  email     String   @db.VarChar(160)
  phone     String?  @db.VarChar(32)
  subject   String   @db.VarChar(160)
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([email])
}
