generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ---------- Enums ----------
 */
enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum EmployeeType {
  DAILY
  MONTHLY
}

enum ContractType {
  PERMANENT
  TEMPORARY
  PROBATION
}

/**
 * ใช้เฉพาะ 5 ระดับนี้
 */
enum PositionLevel {
  STAF
  SVR
  ASST
  MANAGER
  MD
}

enum PositionChangeKind {
  PROMOTE
  DEMOTE
  TRANSFER
}

/**
 * ---------- Masters ----------
 */
model Role {
  id      Int    @id @default(autoincrement())
  name    String @unique // 'admin' | 'user'
  labelTh String
  labelEn String
  users   User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id     Int    @id @default(autoincrement())
  code   String @unique // e.g. 'QMS', 'HR', 'MK'
  nameTh String
  nameEn String

  userDepartments UserDepartment[]

  // reverse relations for logs
  fromPositionChangeLogs PositionChangeLog[] @relation("pcl_fromDept")
  toPositionChangeLogs   PositionChangeLog[] @relation("pcl_toDept")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id     Int    @id @default(autoincrement())
  code   String @unique
  nameTh String
  nameEn String

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ---------- User / Employee Master ----------
 */
model User {
  id Int @id @default(autoincrement())

  // Login identity
  name         String @default("")
  email        String
  passwordHash String

  // Names
  firstNameTh String
  lastNameTh  String
  firstNameEn String
  lastNameEn  String

  // Role (one user -> one role)
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], map: "FK_User_roleId")

  // Organization / Work location (optional)
  orgId        Int?
  organization Organization? @relation(fields: [orgId], references: [id], map: "FK_User_orgId")

  // Many departments (position per department)
  userDepartments UserDepartment[]

  // Primary department (1-1)
  primaryUserDeptId Int?            @unique
  primaryUserDept   UserDepartment? @relation("primary_of_user", fields: [primaryUserDeptId], references: [id], map: "FK_User_primaryUserDeptId")

  // Position change logs (as subject & actor) — ฝั่งตรงข้ามของ PositionChangeLog
  positionChangeLogs      PositionChangeLog[] @relation("pcl_user")
  actedPositionChangeLogs PositionChangeLog[] @relation("pcl_actor")

  // Employee master fields
  employeeCode String?       @unique
  employeeType EmployeeType?
  contractType ContractType?

  startDate        DateTime?
  probationEndDate DateTime?
  resignedAt       DateTime?
  birthDate        DateTime?
  gender           Gender?

  signature  Bytes?
  avatarPath String?

  // Relations
  passwordResets PasswordReset[]

  // Soft delete & timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([email, deletedAt])
  @@index([roleId])
  @@index([orgId])
  @@index([employeeType])
  @@index([contractType])
  @@index([startDate])
  @@index([resignedAt])
  @@index([deletedAt])
}

/**
 * ---------- User ↔ Department (historized) ----------
 */
model UserDepartment {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], map: "FK_UserDepartment_userId")

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], map: "FK_UserDepartment_departmentId")

  positionLevel PositionLevel
  positionName  String? // ชื่อตำแหน่งจริง เช่น 'QMR', 'Project Manager'

  startedAt DateTime  @default(now())
  endedAt   DateTime? // null = active

  // backlink for primary
  primaryOfUser User? @relation("primary_of_user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // allow history (one active record per user+department)
  @@unique([userId, departmentId, endedAt])
  @@index([userId, departmentId])
  @@index([departmentId, positionLevel])
  @@index([startedAt])
  @@index([endedAt])
}

/**
 * ---------- Position change audit log ----------
 */
model PositionChangeLog {
  id   Int                @id @default(autoincrement())
  kind PositionChangeKind

  userId Int
  user   User @relation("pcl_user", fields: [userId], references: [id], map: "FK_PCL_userId")

  fromDepartmentId Int?
  fromDepartment   Department? @relation("pcl_fromDept", fields: [fromDepartmentId], references: [id], map: "FK_PCL_fromDepartmentId")

  toDepartmentId Int?
  toDepartment   Department? @relation("pcl_toDept", fields: [toDepartmentId], references: [id], map: "FK_PCL_toDepartmentId")

  actorId Int?
  actor   User? @relation("pcl_actor", fields: [actorId], references: [id], map: "FK_PCL_actorId")

  fromLevel PositionLevel?
  toLevel   PositionLevel?

  fromName String?
  toName   String?

  effectiveDate DateTime
  reason        String?

  createdAt DateTime @default(now())

  @@index([userId, effectiveDate])
  @@index([kind])
  @@index([fromDepartmentId])
  @@index([toDepartmentId])
}

/**
 * ---------- Password Reset ----------
 */
model PasswordReset {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_PasswordReset_userId")

  @@index([userId])
  @@index([token])
}

/**
 * ---------- Contact / Public Form ----------
 */
model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(120)
  email     String   @db.VarChar(160)
  phone     String?  @db.VarChar(32)
  subject   String   @db.VarChar(160)
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([email])
}
