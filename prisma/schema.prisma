generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ---------- Enums ---------- */
enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum EmployeeType {
  DAILY      // รายวัน
  MONTHLY    // รายเดือน
}

enum ContractType {
  PERMANENT  // ประจำ
  TEMPORARY  // สัญญาจ้าง
  PROBATION  // ระยะทดลองงาน
}

enum PositionLevel {
  INTERN
  STAFF
  SENIOR
  SUPERVISOR
  MANAGER
  DIRECTOR
  EXECUTIVE
}

/* ---------- Masters ---------- */
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique              // e.g. "admin", "staff"
  labelTh   String
  labelEn   String
  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        Int      @id @default(autoincrement())
  code      String   @unique              // e.g. "HR", "ACC"
  nameTh    String
  nameEn    String

  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        Int      @id @default(autoincrement())
  code      String   @unique              // orgCode เช่น "HQ", "BR01"
  nameTh    String
  nameEn    String

  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ---------- User / Employee Master ---------- */
model User {
  id             Int            @id @default(autoincrement())

  // Login identity
  name           String         @default("")
  email          String
  passwordHash   String

  // Names
  firstNameTh    String
  lastNameTh     String
  firstNameEn    String
  lastNameEn     String

  // Role/Department
  roleId         Int
  departmentId   Int
  role           Role           @relation(fields: [roleId], references: [id])
  department     Department     @relation(fields: [departmentId], references: [id])

  // Organization / Work location
  orgId          Int?
  organization   Organization?  @relation(fields: [orgId], references: [id])

  // Employee master fields
  employeeCode   String         @unique             // เช่น "68-0001" (YY-running)
  positionName   String?                             // ชื่อตำแหน่ง (ภาษาไทย/อังกฤษรวมชั่วคราว)
  positionLevel  PositionLevel?                      // ระดับตำแหน่ง
  employeeType   EmployeeType?                       // รายวัน/รายเดือน
  contractType   ContractType?                       // ประจำ/สัญญา/ทดลองงาน

  startDate        DateTime?                         // วันเริ่มงาน
  probationEndDate DateTime?                         // วันสิ้นสุดทดลองงาน
  resignedAt       DateTime?                         // วันลาออก (ถ้ามี)
  birthDate        DateTime?                         // วันเกิด
  gender           Gender?                           // เพศ (optional)

  signature        Bytes?                            // ลายเซ็น (BLOB) — หรือเก็บเป็น path ก็ได้
  avatarPath       String?                           // path รูปโปรไฟล์

  // Relations
  passwordResets   PasswordReset[]

  // Soft delete & timestamps
  deletedAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  /* --- Indexes & Constraints --- */
  // อนุญาตให้ reuse email ได้เมื่อลบแบบ soft (deletedAt != null)
  @@unique([email, deletedAt])

  // ช่วยค้นหา
  @@index([roleId, departmentId])
  @@index([orgId])
  @@index([employeeType])
  @@index([contractType])
  @@index([positionLevel])
  @@index([startDate])
  @@index([resignedAt])
  @@index([deletedAt])
}

/* ---------- Password Reset ---------- */
model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

/* ---------- Contact / Public Form ---------- */
model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(120)
  email     String   @db.VarChar(160)
  phone     String?  @db.VarChar(32)
  subject   String   @db.VarChar(160)
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([email])
}
