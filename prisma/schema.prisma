// =====================================
// Prisma Client & Datasource
// =====================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum EmployeeType {
  DAILY
  MONTHLY
}

enum ContractType {
  PERMANENT
  TEMPORARY
  PROBATION
}

enum PositionLevel {
  STAF
  SVR
  ASST
  MANAGER
  MD
}

enum PositionChangeKind {
  PROMOTE
  DEMOTE
  TRANSFER
}

enum EvalType {
  OPERATIONAL // พนักงานปฏิบัติการ
  SUPERVISOR // พนักงานบังคับบัญชา/วิชาชีพ
}

enum EvalStage {
  MID_YEAR
  YEAR_END
}

enum EvalStatus {
  DRAFT
  SUBMITTED
  APPROVER_APPROVED
  MD_APPROVED
  COMPLETED
  REJECTED
}

model Role {
  id      Int    @id @default(autoincrement())
  name    String @unique @db.VarChar(50)
  labelTh String @db.VarChar(120)
  labelEn String @db.VarChar(120)
  users   User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id     Int    @id @default(autoincrement())
  code   String @unique @db.VarChar(32)
  nameTh String @db.VarChar(120)
  nameEn String @db.VarChar(120)

  userDepartments UserDepartment[]

  fromPositionChangeLogs PositionChangeLog[] @relation("pcl_fromDept")
  toPositionChangeLogs   PositionChangeLog[] @relation("pcl_toDept")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        Int       @id @default(autoincrement())
  code      String    @unique @db.VarChar(32)
  nameTh    String    @db.VarChar(120)
  nameEn    String    @db.VarChar(120)
  deletedAt DateTime?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())

  name         String  @default("") @db.VarChar(160)
  email        String  @unique @db.VarChar(160)
  passwordHash String  @db.VarChar(255)

  firstNameTh String @db.VarChar(120)
  lastNameTh  String @db.VarChar(120)
  firstNameEn String @db.VarChar(120)
  lastNameEn  String @db.VarChar(120)

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  orgId        Int?
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  userDepartments UserDepartment[]

  primaryUserDeptId Int?            @unique
  primaryUserDept   UserDepartment? @relation("primary_of_user", fields: [primaryUserDeptId], references: [id], onDelete: SetNull)

  positionChangeLogs      PositionChangeLog[] @relation("pcl_user")
  actedPositionChangeLogs PositionChangeLog[] @relation("pcl_actor")

  evaluations  Evaluation[] @relation("EvalOwner")
  manageEvals  Evaluation[] @relation("EvalManager")
  mdEvals      Evaluation[] @relation("EvalMD")
  createdEvals Evaluation[] @relation("EvalCreator")

  employeeCode String?       @unique @db.VarChar(32)
  employeeType EmployeeType?
  contractType ContractType?

  startDate        DateTime?
  probationEndDate DateTime?
  resignedAt       DateTime?
  birthDate        DateTime?
  gender           Gender?

  signature  Bytes?
  avatarPath String? @db.VarChar(255)

  passwordResets PasswordReset[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([roleId])
  @@index([orgId])
  @@index([email, deletedAt])
  @@index([employeeType])
  @@index([contractType])
  @@index([startDate])
  @@index([resignedAt])
  @@index([deletedAt])
}

model UserDepartment {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  positionLevel PositionLevel
  positionName  String? @db.VarChar(120)

  startedAt DateTime  @default(now())
  endedAt   DateTime?
  isActive  Boolean   @default(true)

  primaryOfUser User? @relation("primary_of_user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, departmentId, isActive])
  @@index([userId, departmentId])
  @@index([departmentId, positionLevel])
  @@index([startedAt])
  @@index([endedAt])
}

model PositionChangeLog {
  id   Int                @id @default(autoincrement())
  kind PositionChangeKind

  userId Int
  user   User @relation("pcl_user", fields: [userId], references: [id], onDelete: Cascade)

  fromDepartmentId Int?
  fromDepartment   Department? @relation("pcl_fromDept", fields: [fromDepartmentId], references: [id], onDelete: SetNull)

  toDepartmentId Int?
  toDepartment   Department? @relation("pcl_toDept", fields: [toDepartmentId], references: [id], onDelete: SetNull)

  actorId Int?
  actor   User? @relation("pcl_actor", fields: [actorId], references: [id], onDelete: SetNull)

  fromLevel PositionLevel?
  toLevel   PositionLevel?

  fromName String? @db.VarChar(120)
  toName   String? @db.VarChar(120)

  effectiveDate DateTime
  reason        String?

  createdAt DateTime @default(now())

  @@index([userId, effectiveDate])
  @@index([kind])
  @@index([fromDepartmentId])
  @@index([toDepartmentId])
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(120)
  email     String   @db.VarChar(160)
  phone     String?  @db.VarChar(32)
  subject   String   @db.VarChar(160)
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([email])
}

model EvalCycle {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(64)
  year        Int
  stage       EvalStage
  openAt      DateTime
  closeAt     DateTime
  isActive    Boolean   @default(true)
  isMandatory Boolean   @default(true)

  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([year, stage])
  @@index([isActive])
}
model Evaluation {
  id Int @id @default(autoincrement())

  ownerId Int
  owner   User @relation("EvalOwner", fields: [ownerId], references: [id], onDelete: Restrict)

  createdById Int
  createdBy   User @relation("EvalCreator", fields: [createdById], references: [id], onDelete: Restrict)

  managerId Int?
  manager   User? @relation("EvalManager", fields: [managerId], references: [id], onDelete: SetNull)
  mdId      Int?
  md        User? @relation("EvalMD", fields: [mdId], references: [id], onDelete: SetNull)

  cycleId Int
  cycle   EvalCycle  @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  type    EvalType
  stage   EvalStage
  status  EvalStatus @default(DRAFT)

  submittedAt DateTime?
  approverAt  DateTime?
  mdAt        DateTime?
  completedAt DateTime?
  rejectedAt  DateTime?

  s1_responsibility  Float?
  s1_development     Float?
  s1_workload        Float?
  s1_qualityStandard Float?
  s1_coordination    Float? 

  s2_valueOfWork          Float? 
  s2_customerSatisfaction Float? 
  s2_costEffectiveness    Float? 
  s2_timeliness           Float?

  s3_jobKnowledge         Float?
  s3_attitude             Float?
  s3_contextUnderstanding Float?
  s3_systematicThinking   Float?
  s3_decisionMaking       Float?
  s3_adaptability         Float?
  s3_leadership           Float?
  s3_verbalComm           Float?
  s3_writtenComm          Float?
  s3_selflessness         Float?
  s3_ruleCompliance       Float?
  s3_selfReliance         Float?

  t_potential           String?
  t_strengthsWeaknesses String?
  t_trainingNeeds       String?

  scorePerf   Float?
  scoreResult Float?
  scoreComp   Float?
  scoreTotal  Float?

  submitterComment   String?
  submitterSignedAt  DateTime?
  submitterSignature Bytes?

  managerComment   String?
  managerSignedAt  DateTime?
  managerSignature Bytes?

  mdComment   String?
  mdSignedAt  DateTime?
  mdSignature Bytes?

  hrNote       String?
  hrReceivedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cycleId, ownerId])
  @@index([ownerId, status])
  @@index([createdById])
  @@index([stage])
  @@index([status])
  @@index([managerId])
  @@index([mdId])
  @@index([cycleId, status])
}
